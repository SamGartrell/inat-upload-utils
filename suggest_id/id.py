#######################################
# Sam Gartrell
# 20250109
# automated image ID
# NOTE: inaturalist App guidelines mandate that "content must be generated with real human involvement or oversight"
# This app therefore only creates a CSV of image IDs designed for manual review before uploading to iNaturalist
#######################################
import sys
import os
import json
import requests
import PIL
import datetime
import pprint


def refresh_token(
    manual_token="eyJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjo4ODA4MjMzLCJleHAiOjE3MzY1NDU1NTR9.L2OXIr6gS8wELPUA1pmm7ZIyGNzhUWLvlKFEIWPhhhAac0MbQHo6FA-gupaJY-XuZoAd5IOfyhrNhitICW1dvw",
):
    print(f"getting token...")
    # TODO: need an oauth app setup, request one here: https://www.inaturalist.org/oauth/app_owner_application
    # in interim, tokens can be generated by manually visting the endpoint in browser after authenticating; tokens last 2 months or something crazy
    res = requests.get("https://www.inaturalist.org/users/api_token?f=json")
    if res and res.ok:
        try:
            token = res.json().get("api_token", ValueError("Failed to get token"))
            return token
        except Exception as e:
            print(e)
    return manual_token


def get_cv_ids(image_path, token=None):
    """sends an image to the computer vision model, returns the response json

    Args:
        image_path (str): the location of the image.
        token (str, optional): a token for the API. Defaults to None.

    Returns:
        _type_: _description_
    """
    if not token:
        token = refresh_token()
    with open(image_path, "rb") as image_file:
        files = {"image": image_file}
        headers = {"Authorization": token}
        res = requests.post(
            "https://api.inaturalist.org/v1/computervision/score_image",
            files=files,
            headers=headers,
        )
    print(json.loads(res.text))
    return json.loads(res.text)


res = get_cv_ids(
    r"F:\SGP\repos\inat-upload-utils\suggest_id\images\gfhd32343j43334.jpg"
)


def interpret_results(res: object, confidence_threshold: int = 75):
    if (
        res.get("results")
        and isinstance(res.get("results"), list)
        and len(res.get("results")) > 0
    ):
        # if there's a sufficient score, return that suggestion; IDs sorted by best-worst score
        results = res.get("results")
        if results[0].get("combined_score") > confidence_threshold:
            score = results[0].get("combined_score")
            if results[0].get("taxon").get("name"):
                result = results[0].get("taxon")
                print(
                    f"acceptable ID found with confidence threshold {confidence_threshold}:\n\tscore: {score}\n\trank: {result.get('rank')}\n\tname: {result.get('name')}"
                )
                return results[0].get("taxon").get("name")
    else:
        # if not, get common ancestor of all suggestions
        if res.get("common_ancestor"):
            print(
                f"no acceptable ID found; resorting to common ancestor:\n\trank: {res.get('common_ancestor').get('rank')}\n\tname: {res.get('common_ancestor').get('name')}"
            )
            return res.get("common_ancestor").get("name")
    # else,
    return None
